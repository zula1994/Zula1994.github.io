import{_ as t,a as r,I as a,aw as n,E as e,o as s}from"./chunks/framework.Z4-7JWeT.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{"uid":20240912111624,"cdate":"2024-09-12T00:00:00.000Z","mdate":"2024-09-12 星期四 11:16:24","cssclasses":["max"],"comment":true,"tags":["前端/性能优化"]},"headers":[],"relativePath":"笔记/🛠️ 开发/前端性能优化-网络篇.md","filePath":"笔记/🛠️ 开发/前端性能优化-网络篇.md"}'),h={name:"笔记/🛠️ 开发/前端性能优化-网络篇.md"},c=n('<h2 id="序言" tabindex="-1">序言 <a class="header-anchor" href="#序言" aria-label="Permalink to &quot;序言&quot;">​</a></h2><ul><li>从输入 URL 到页面加载完成，发生了什么？</li></ul><blockquote><ol><li>DNS 解析域名找到 ip 地址</li><li>与 ip 地址对应的服务器建立 TCP 连接</li><li>向服务器抛出 HTTP 请求</li><li>服务端处理请求，HTTP 响应返回</li><li>浏览器拿到响应数据，解析响应内容，把解析的结果展示给用户</li></ol></blockquote><h2 id="http-优化-资源压缩与合并" tabindex="-1">HTTP 优化 （资源压缩与合并） <a class="header-anchor" href="#http-优化-资源压缩与合并" aria-label="Permalink to &quot;HTTP 优化 （资源压缩与合并）&quot;">​</a></h2><ul><li>减少请求次数</li><li>减少单次请求的响应时间</li></ul><h3 id="webpack-优化方案" tabindex="-1">webpack 优化方案 <a class="header-anchor" href="#webpack-优化方案" aria-label="Permalink to &quot;webpack 优化方案&quot;">​</a></h3><h4 id="构建过程中优化" tabindex="-1">构建过程中优化 <a class="header-anchor" href="#构建过程中优化" aria-label="Permalink to &quot;构建过程中优化&quot;">​</a></h4><ol><li>不要让 loader 做太多事情 在 loader 配置时通过写入 exclude 去避免 babel-loader 对不必要的文件的处理</li><li>用 DllPlugin 处理文件 <ul><li>基于 dll 专属的配置文件，打包 dll 库</li><li>基于 webpack. config. js 文件，打包业务代码</li></ul></li><li>Happypack——将 loader 由单进程转为多进程</li></ol><h4 id="构建结果体积压缩" tabindex="-1">构建结果体积压缩 <a class="header-anchor" href="#构建结果体积压缩" aria-label="Permalink to &quot;构建结果体积压缩&quot;">​</a></h4><ol><li>tree-shaking 删除冗余代码</li><li>UglifyJsPlugin 去除 console 、注释等</li></ol><h2 id="开启-gzip" tabindex="-1">开启 GZIP <a class="header-anchor" href="#开启-gzip" aria-label="Permalink to &quot;开启 GZIP&quot;">​</a></h2><p>文件大小可压缩 70%</p><h2 id="图片处理" tabindex="-1">图片处理 <a class="header-anchor" href="#图片处理" aria-label="Permalink to &quot;图片处理&quot;">​</a></h2><h3 id="jpg-jpeg" tabindex="-1">JPG/JPEG <a class="header-anchor" href="#jpg-jpeg" aria-label="Permalink to &quot;JPG/JPEG&quot;">​</a></h3><p>有损压缩、体积小、加载快、不支持透明 常用于banner，背景图，大轮播图</p><h3 id="png" tabindex="-1">PNG <a class="header-anchor" href="#png" aria-label="Permalink to &quot;PNG&quot;">​</a></h3><p>无损压缩、质量高、体积大、支持透明 常用于小logo，小的高对比度的图片</p><h3 id="svg" tabindex="-1">SVG <a class="header-anchor" href="#svg" aria-label="Permalink to &quot;SVG&quot;">​</a></h3><p>文本文件、体积小、不失真、兼容性好，渲染成本高</p><h3 id="base64" tabindex="-1">Base64 <a class="header-anchor" href="#base64" aria-label="Permalink to &quot;Base64&quot;">​</a></h3><p>文本文件、依赖编码、小图标解决方案 ，减少HTTP请求次数。----雪碧图</p><h3 id="webp-格式" tabindex="-1">WebP 格式 <a class="header-anchor" href="#webp-格式" aria-label="Permalink to &quot;WebP 格式&quot;">​</a></h3><p>是 Google 专为 Web开发的一种旨在加快图片加载速度的图片格式，它支持有损压缩和无损压缩。 兼容性不好。</p><h3 id="avif" tabindex="-1">AVIF <a class="header-anchor" href="#avif" aria-label="Permalink to &quot;AVIF&quot;">​</a></h3><p>进阶版WebP</p>',25);function d(p,b,u,_,P,m){const l=e("NolebasePageProperties"),o=e("NolebaseGitContributors"),i=e("NolebaseGitChangelog");return s(),r("div",null,[a(l),c,a(o),a(i)])}const g=t(h,[["render",d]]);export{f as __pageData,g as default};
